#include <MeMCore.h>

void celebrate() {
  buzzer.tone(392, 200);
  buzzer.tone(523, 200);
  buzzer.tone(659, 200);
  buzzer.tone(784, 200);
  buzzer.tone(659, 150);
  buzzer.tone(784, 400);
  buzzer.noTone()
}

void stopMotor() {
  motor_left.stop;
  motor_right.stop;
}

void moveForward() {
  motor_left.run(255);
  motor_right.run(255);
}

void turnRight() {
  motor_left.run(255);   // Run the left motor at full speed
  motor_right.run(50);   // Run the right motor at half speed for a smoother turn
  delay(2000)
  motor_left.run(255);
  motor_right.run(255);
}

void turnLeft() { 
  motor_left.run(50);   // Run the left motor at full speed
  motor_right.run(255);   // Run the right motor at half speed for a smoother turn
  delay(2000)
  motor_left.run(255);
  motor_right.run(255);
  }

void uTurn() {
  motor_left.run(100);    // Run the left motor forward
  motor_right.run(-100);  // Run the right motor backward
  // Adjust the delay to control the time needed for a full U-turn (about 180 degrees)
  delay(1500);  // Adjust this value based on testing (e.g., 1500 milliseconds for 1.5 seconds)
  // Stop the motors after the U-turn
  motor_left.run(0);   
  motor_right.run(0);
  }

void doubleLeftTurn() {
  motor_left.run(-100);  // Left motor backward
  motor_right.run(100);  // Right motor forward

  delay(700);  // Adjust the delay to achieve a 90-degree left turn

  // Move forward between the turns:
  motor_left.run(100);  // Both motors forward
  motor_right.run(100);

  delay(1000);  // Move forward for 1 second (adjust as needed)

  // Second left turn (90 degrees):
  motor_left.run(-100);  // Left motor backward
  motor_right.run(100);  // Right motor forward

  delay(700);  // Adjust this delay for the second 90-degree left turn

  // Stop both motors after the second turn:
  motor_left.run(0);
  motor_right.run(0);
}
}
void doubleRightTurn() {
// First right turn (90 degrees):
  motor_left.run(100);   // Left motor forward
  motor_right.run(-100); // Right motor backward

  delay(700);  // Adjust the delay to achieve a 90-degree right turn

  // Move forward between the turns:
  motor_left.run(100);  // Both motors forward
  motor_right.run(100);

  delay(1000);  // Move forward for 1 second (adjust as needed)

  // Second right turn (90 degrees):
  motor_left.run(100);   // Left motor forward
  motor_right.run(-100); // Right motor backward

  delay(700);  // Adjust this delay for the second 90-degree right turn

  // Stop both motors after the second turn:
  motor_left.run(0);
  motor_right.run(0);
// Code for double right turn
}
void nudgeLeft() {// Code for nudging slightly to the left for some short interval}
void nudgeRight() {// Code for nudging slightly to the right for some short
interval}
void shineIR() {// Code for turning on the IR emitter only}
void shineRed() {// Code for turning on the red LED only}
void shineGreen() {// Code for turning on the green LED only}
void shineBlue() {// Code for turning on the blue LED only}
int detectColour()
{
// Shine Red, read LDR after some delay
// Shine Green, read LDR after some delay
// Shine Blue, read LDR after some delay
// Run algorithm for colour decoding
}
void setup()
{
// Configure pinMode for A0, A1, A2, A3
}
void loop()
{
  moveFoward();
// Read ultrasonic sensing distance (choose an appropriate timeout)
// Read IR sensing distance (turn off IR, read IR detector, turn on IR, read IR
detector, estimate distance)
// if within black line, stop motor, detect colour, and take corresponding action
// else if too near to left wall, nudge right
// else if too near to right wall, nudge left
// else move forward
}
