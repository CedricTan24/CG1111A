#include <MeMCore.h>

#define LDR_PIN A6         // Define the LDR pin on A6
MeRGBLed led(7);           // Define the RGB LED on pin 7

#define DELAY_TIME 200     // Delay time in milliseconds to allow LDR to stabilize
#define MAXLED 255         // Maximum LED brightness
#define IR_PIN 9  // Define the pin for the IR emitter

#define LEFT_SENSOR_PIN A1    // Pin for the left IR or ultrasonic sensor
#define RIGHT_SENSOR_PIN A2   // Pin for the right IR or ultrasonic sensor
#define LEFT_WALL_THRESHOLD 30    // Threshold in cm for left wall proximity
#define RIGHT_WALL_THRESHOLD 30   // Threshold in cm for right wall proximity

void celebrate() {
  buzzer.tone(392, 200);
  buzzer.tone(523, 200);
  buzzer.tone(659, 200);
  buzzer.tone(784, 200);
  buzzer.tone(659, 150);
  buzzer.tone(784, 400);
  buzzer.noTone()
}

void stopMotor() {
  motor_left.stop;
  motor_right.stop;
}

void moveForward() {
  motor_left.run(255);
  motor_right.run(255);
}

void turnRight() {
  motor_left.run(255);   // Run the left motor at full speed
  motor_right.run(50);   // Run the right motor at half speed for a smoother turn
  delay(2000)
  motor_left.run(255);
  motor_right.run(255);
}

void turnLeft() { 
  motor_left.run(50);   // Run the left motor at full speed
  motor_right.run(255);   // Run the right motor at half speed for a smoother turn
  delay(2000)
  motor_left.run(255);
  motor_right.run(255);
  }

void uTurn() {
  motor_left.run(100);    // Run the left motor forward
  motor_right.run(-100);  // Run the right motor backward
  // Adjust the delay to control the time needed for a full U-turn (about 180 degrees)
  delay(1500);  // Adjust this value based on testing (e.g., 1500 milliseconds for 1.5 seconds)
  // Stop the motors after the U-turn
  motor_left.run(0);   
  motor_right.run(0);
  }

void doubleLeftTurn() {
  motor_left.run(-100);  // Left motor backward
  motor_right.run(100);  // Right motor forward

  delay(700);  // Adjust the delay to achieve a 90-degree left turn

  // Move forward between the turns:
  motor_left.run(100);  // Both motors forward
  motor_right.run(100);

  delay(1000);  // Move forward for 1 second (adjust as needed)

  // Second left turn (90 degrees):
  motor_left.run(-100);  // Left motor backward
  motor_right.run(100);  // Right motor forward

  delay(700);  // Adjust this delay for the second 90-degree left turn

  // Stop both motors after the second turn:
  motor_left.run(0);
  motor_right.run(0);
}
}
void doubleRightTurn() {
// First right turn (90 degrees):
  motor_left.run(100);   // Left motor forward
  motor_right.run(-100); // Right motor backward

  delay(700);  // Adjust the delay to achieve a 90-degree right turn

  // Move forward between the turns:
  motor_left.run(100);  // Both motors forward
  motor_right.run(100);

  delay(1000);  // Move forward for 1 second (adjust as needed)

  // Second right turn (90 degrees):
  motor_left.run(100);   // Left motor forward
  motor_right.run(-100); // Right motor backward

  delay(700);  // Adjust this delay for the second 90-degree right turn

  // Stop both motors after the second turn:
  motor_left.run(0);
  motor_right.run(0);
// Code for double right turn
}


void nudgeLeft() {
  leftMotor.run(speed);
  rightMotor.run(-speed);
  delay(TIMEDELAY);
}

void nudgeRight() {
  leftMotor.run(-speed);
  rightMotor.run(speed);
  delay(TIMEDELAY);
}

void shineIR() {
  pinMode(IR_PIN, OUTPUT);      // Set the IR pin as an output
  digitalWrite(IR_PIN, HIGH);   // Turn on the IR emitter
// Code for turning on the IR emitter only}
void shineRed() {
  led.setColor(255, 0, 0);  // Set LED to red (255 for red, 0 for green, 0 for blue)
  led.show();               // Apply the color setting to the LED// Code for turning on the red LED only}
void shineGreen() {
  led.setColor(0, 255, 0);  // Set LED to green (0 for red, 255 for green, 0 for blue)
  led.show();               // Apply the color setting to the LED// Code for turning on the green LED only}
void shineBlue() {
  led.setColor(0, 0, 255);  // Set LED to blue (0 for red, 0 for green, 255 for blue)
  led.show();               // Apply the color setting to the LED// Code for turning on the blue LED only}
int detectColour()
{
  float colourArray[3] = {0};

  // Shine Red, read LDR
  led.setColor(255, 0, 0);         // Set LED to red
  led.show();
  delay(DELAY_TIME);               // Wait for light to stabilize
  colourArray[0] = analogRead(LDR_PIN); // Read LDR value for red
  Serial.print("Red value: ");
  Serial.println(colourArray[0]);

  // Shine Green, read LDR
  led.setColor(0, 255, 0);         // Set LED to green
  led.show();
  delay(DELAY_TIME);
  colourArray[1] = analogRead(LDR_PIN); // Read LDR value for green
  Serial.print("Green value: ");
  Serial.println(colourArray[1]);

  // Shine Blue, read LDR
  led.setColor(0, 0, 255);         // Set LED to blue
  led.show();
  delay(DELAY_TIME);
  colourArray[2] = analogRead(LDR_PIN); // Read LDR value for blue
  Serial.print("Blue value: ");
  Serial.println(colourArray[2]);

  // Turn off LED after reading
  led.setColor(0, 0, 0);
  led.show();

  // Algorithm to decode color based on RGB readings
  int detectedColor = -1;
  float minDistance = 5000;  // Minimum distance threshold for comparison
  static float predefinedColors[6][3] = { 
    {0, 0, 0},          // Black
    {185, 35, 35},      // Red
    {45, 100, 60},      // Green
    {255, 165, 0},      // Orange
    {255, 192, 203},    // Pink
    {173, 216, 230}     // Light Blue
  };

  for (int i = 0; i < 6; i++) {
    float distance = 0;
    for (int j = 0; j < 3; j++) {
      distance += (predefinedColors[i][j] - colourArray[j]) * (predefinedColors[i][j] - colourArray[j]);
    }
    if (distance < minDistance) {
      minDistance = distance;
      detectedColor = i;
    }
  }

  // Output the detected color to Serial Monitor
  Serial.print("Detected color index: ");
  Serial.println(detectedColor);

  return detectedColor;  // Return the index of the detected color
// Shine Red, read LDR after some delay
// Shine Green, read LDR after some delay
// Shine Blue, read LDR after some delay
// Run algorithm for colour decoding
}
void setup()
{
// Initialize Serial for debugging
  Serial.begin(9600);
  
  // Configure pin modes for sensors
  pinMode(LEFT_SENSOR_PIN, INPUT);       // Left wall sensor
  pinMode(RIGHT_SENSOR_PIN, INPUT);      // Right wall sensor
  
  // Configure pin modes for IR emitter and detector
  pinMode(IR_PIN, OUTPUT);               // IR emitter
  pinMode(IR_DETECTOR_PIN, INPUT);       // IR detector
  
  // Configure pin mode for line sensor
  pinMode(LINE_SENSOR_PIN, INPUT);       // Line sensor pin
  
  // Stop the motors initially
  stopMotor();

  // Initialize the RGB LED in an off state
  led.setColor(0, 0, 0);    // Turn off the RGB LED
  led.show();

  // Set initial state for IR emitter
  digitalWrite(IR_PIN, LOW);  // Ensure IR emitter is off

  // Provide feedback for setup completion
  Serial.println("Setup Complete. Ready to start.");
// Configure pinMode for A0, A1, A2, A3
}
void loop()
{
  moveForward();
  int ultrasonicDistance = getUltrasonicDistance(); // Get ultrasonic distance
  int irDistance = getIRDistance();                 // Get IR distance

// Read ultrasonic sensing distance (choose an appropriate timeout)
// Read IR sensing distance (turn off IR, read IR detector, turn on IR, read IR
detector, estimate distance)
// Check for black line
  if (isOnBlackLine()) {                  // Assuming you have a function to detect black line
    stopMotor();
    int color = detectColour();           // Detect color when on black line
    takeActionBasedOnColor(color);        // Take action based on detected color
  } 
  // If too close to left wall
  else if (ultrasonicDistance < 10 && isNearLeftWall()) { // Example threshold and condition for left wall
    nudgeRight();                         // Nudge right if too close to the left wall
  } 
  // If too close to right wall
  else if (ultrasonicDistance < 10 && isNearRightWall()) { // Example threshold and condition for right wall
    nudgeLeft();                          // Nudge left if too close to the right wall
  } 
  else {
    moveForward();                        // Move forward if all conditions are normal
  }

  delay(100); // Adjust delay as needed for smooth operation
// if within black line, stop motor, detect colour, and take corresponding action
// else if too near to left wall, nudge right
// else if too near to right wall, nudge left
// else move forward
}

int getUltrasonicDistance() {
  int distance = ultrasonic.distanceCm();  // Replace 'ultrasonic' with your MeUltrasonicSensor object
  return distance;
}

// IR distance reading
int getIRDistance() {
  digitalWrite(IR_PIN, HIGH);
  delay(10);
  int reading = analogRead(IR_DETECTOR_PIN); // Replace 'IR_DETECTOR_PIN' with your actual IR sensor pin
  digitalWrite(IR_PIN, LOW);
  return reading;
}

// Example black line detection (using a threshold for IR sensor readings)
bool isOnBlackLine() {
  int lineSensorValue = analogRead(LINE_SENSOR_PIN); // Replace with your line sensor pin
  return lineSensorValue < BLACK_THRESHOLD;          // Replace 'BLACK_THRESHOLD' with your black line threshold
}

// Function to read the left wall distance
int getLeftWallDistance() {
  int leftDistance = analogRead(LEFT_SENSOR_PIN);  // Adjust for IR or ultrasonic distance
  // If using an ultrasonic sensor, use ultrasonic.distanceCm() method
  // Example for MeUltrasonicSensor:
  // MeUltrasonicSensor leftUltrasonicSensor(PORT_X);
  // int leftDistance = leftUltrasonicSensor.distanceCm();
  return leftDistance;
}

// Function to read the right wall distance
int getRightWallDistance() {
  int rightDistance = analogRead(RIGHT_SENSOR_PIN); // Adjust for IR or ultrasonic distance
  // If using an ultrasonic sensor, use ultrasonic.distanceCm() method
  // Example for MeUltrasonicSensor:
  // MeUltrasonicSensor rightUltrasonicSensor(PORT_Y);
  // int rightDistance = rightUltrasonicSensor.distanceCm();
  return rightDistance;
}

bool isNearLeftWall() {
  int leftDistance = getLeftWallDistance();
  Serial.print("Left Wall Distance: ");
  Serial.println(leftDistance);
  
  return leftDistance < LEFT_WALL_THRESHOLD; // Returns true if too close to the left wall
}

bool isNearRightWall() {
  int rightDistance = getRightWallDistance();
  Serial.print("Right Wall Distance: ");
  Serial.println(rightDistance);
  
  return rightDistance < RIGHT_WALL_THRESHOLD; // Returns true if too close to the right wall
}
