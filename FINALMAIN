#include <MeMCore.h>

#define LDR_PIN A0 // Define the LDR pin on A6
#define IR_PIN A1  // Define the pin for the IR emitter

#define DELAY_TIME 300     // Delay time in milliseconds to allow LDR to stabilize
#define LDRWait 20         // Declare LDR wait time

MeDCMotor motor_left(M1);          // Declare the left motor on port M1
MeDCMotor motor_right(M2);         // Declare the right motor on port M2
MeLineFollower lineFinder(PORT_2); // Declare linefinder PORT number

#define TRIGGER A3 // Declare Ultrasonic pins
#define DECODER1 11
#define DECODER2 12

MeBuzzer buzzer;  // Declare the buzzer

void celebrate() {
 buzzer.tone(264, 300); // C4
  delay(100);
  buzzer.tone(264, 300); // C4
  delay(100);
  buzzer.tone(264, 600); // C4
  delay(100);
  buzzer.tone(264, 300); // C4
  delay(100);
  buzzer.tone(264, 300); // C4
  delay(100);
  buzzer.tone(264, 600); // C4
  delay(100);
  
  buzzer.tone(330, 300); // E4
  delay(100);
  buzzer.tone(330, 300); // E4
  delay(100);
  buzzer.tone(330, 600); // E4
  delay(100);
  buzzer.tone(330, 300); // E4
  delay(100);
  buzzer.tone(330, 300); // E4
  delay(100);
  buzzer.tone(349, 600); // F4
  delay(100);

  // Second phrase: Oh! What fun it is to ride in a one-horse open sleigh
  buzzer.tone(392, 300); // G4
  delay(100);
  buzzer.tone(392, 300); // G4
  delay(100);
  buzzer.tone(392, 300); // G4
  delay(100);
  buzzer.tone(330, 300); // E4
  delay(100);
  buzzer.tone(330, 300); // E4
  delay(100);
  buzzer.tone(330, 300); // E4
  delay(100);
}

void stopMotor() {
  motor_left.run(0); // Left motor stop
  motor_right.run(0); // Right motor stop
}

void moveForward() {
  motor_left.run(-225); // Left motor forward
  motor_right.run(225); // Right motor forward
}

void turnRight() {
  motor_left.run(-255);   // Left motor forward
  motor_right.run(-255);  // Right motor backward
  delay(285);
}

void turnLeft() { 
  motor_left.run(255);   // Left motor backward
  motor_right.run(255);  // Right motor forward  
  delay(280);
  }

void uTurn() { //done
  motor_left.run(255);    // Run the left motor forward
  motor_right.run(255);  // Run the right motor backward
  // Adjust the delay to control the time needed for a full U-turn (about 180 degrees)
  delay(630);  // Adjust this value based on testing (e.g., 1500 milliseconds for 1.5 seconds)
  // Stop the motors after the U-turn
  motor_left.run(0);   
  motor_right.run(0);
  }

void doubleLeftTurn() { 
  motor_left.run(255);  // Left motor forward
  motor_right.run(255);  // Right motor backward

  delay(315);  // Adjust the delay to achieve a 90-degree left turn

  // Move forward between the turns:
  moveForward();

  delay(750);  // Move forward for 1 second (adjust as needed)

  // Second left turn (90 degrees):
  motor_left.run(255);  // Left motor backward
  motor_right.run(255);  // Right motor forward

  delay(313);  // Adjust this delay for the second 90-degree left turn
}

void doubleRightTurn() {
// First right turn (90 degrees):
  motor_left.run(-255);   // Left motor forward
  motor_right.run(-255); // Right motor backward

  delay(330);  // Adjust the delay to achieve a 90-degree right turn

  // Move forward between the turns:
  moveForward();

  delay(730);  // Move forward for 1 second (adjust as needed)

  // Second right turn (90 degrees):
  motor_left.run(-255);   // Left motor forward
  motor_right.run(-255); // Right motor backward

  delay(310);  // Adjust this delay for the second 90-degree right turn
}


void nudgeLeft() {
  motor_left.run(-75);
  motor_right.run(-75);
  delay(140);
}

void nudgeRight() {
  motor_left.run(75);
  motor_right.run(75);
  delay(140);
}
void shineIR() {
  pinMode(IR_PIN, OUTPUT);      // Set the IR pin as an output
  digitalWrite(IR_PIN, HIGH);   // Turn on the IR emitter
// Code for turning on the IR emitter only
}

void shineRed(){
  digitalWrite(11, HIGH);
  digitalWrite(12, HIGH);
}

void shineGreen(){
  digitalWrite(11, LOW);
  digitalWrite(12, HIGH);
}

void shineBlue(){
  digitalWrite(11, HIGH);
  digitalWrite(12, LOW);
}

int getAvgReading(int times) {
  //find the average reading for the requested number of times of scanning LDR
  int reading;
  int total = 0;
  //take the reading as many times as requested and add them up
  for (int i = 0; i < times; i++) {
    reading = analogRead(LDR_PIN);
    total = reading + total;
    delay(LDRWait);
  }
  //calculate the average and return it
  return total / times;
}
char colourStr[3][5] = { "R = ", "G = ", "B = " };

int detectColour()
{
  float colourArray[3] = {0};

  for (int c = 0; c <= 2; c++){
    if(c == 0){shineRed();}
    if(c == 1){shineGreen();}
    if(c == 2){shineBlue();}

  delay(DELAY_TIME);
  colourArray[c] = getAvgReading(5);
  delay(DELAY_TIME);
  Serial.print(colourStr[c]);
  Serial.println(colourArray[c]);}

  // Algorithm to decode color based on RGB readings
  int detectedColor = -1;
  float minDistance = 100000;  // Minimum distance threshold for comparison
  static float predefinedColors[6][3] = { 
    {839, 943, 895},    // White 0
    {770, 866, 747},      // Red 1
    {730, 914, 803},      // Green 2
    {808, 900, 802},      // Orange 3
    {810, 921, 853},    // Pink 4
    {757, 911, 857}     // Light Blue 5
  };

  for (int i = 0; i < 6; i++) {
    float distance = 0;
    for (int j = 0; j < 3; j++) {
      distance += (predefinedColors[i][j] - colourArray[j]) * (predefinedColors[i][j] - colourArray[j]);
    }
    distance = sqrt(distance);
    if (distance < minDistance) {
      minDistance = distance;
      detectedColor = i;
    }
  }

  // Output the detected color to Serial Monitor
  Serial.print("Detected color index: ");
  Serial.println(detectedColor);

  return detectedColor;  // Return the index of the detected color
}


void setup()
{
  //pinMode()
  Serial.begin(9600);
  pinMode(A1, INPUT);
  pinMode(TRIGGER, OUTPUT);
  digitalWrite(TRIGGER, LOW);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
  digitalWrite(11, LOW);
  digitalWrite(12, LOW);

  // Set initial state for IR emitter
  digitalWrite(IR_PIN, LOW);  // Ensure IR emitter is off

// Configure pinMode for A0, A1, A2, A3
}

void loop()
{
int ULTRASONIC = getUltrasonic(); // Read ultrasonic sensing distance (choose an appropriate timeout)
int IR = getIR(); // Read IR sensing distance (turn off IR, read IR detector, turn on IR, read IR detector, estimate distance)
Serial.print("Ultrasonic Reading: ");
Serial.println(ULTRASONIC);
Serial.print("IR Reading: ");
Serial.println(IR);
int sensorState = lineFinder.readSensors();
Serial.println(sensorState);
if (sensorState == S1_IN_S2_IN) { // if detect black line, it stops
  stopMotor();
  int color = detectColour();           // Detect color when on black line
  if (color == 0) {
    takeActionBasedOnColor(color);
    return;
  }
  takeActionBasedOnColor(color);       // Take action based on detected color
} // if within black line, stop motor, detect colour, and take corresponding action
else if (ULTRASONIC < 430 && ULTRASONIC > 1)
{
nudgeLeft();
} //   else if too near to left wall, nudge right
else if (IR > 400)
{
nudgeRight();
} //   else if too near to right wall, nudge left
else 
{
moveForward(); 
} //   else move forward
}

int getUltrasonic()
{
  pinMode(TRIGGER, OUTPUT);
  digitalWrite(TRIGGER, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER, LOW);
  pinMode(TRIGGER, INPUT);
  int ultrasonicTime = pulseIn(TRIGGER, HIGH, 30000); //56ms per cm if ultrasonicTime > 600, nudgeright
  delay(10);
  return ultrasonicTime;
}

int getIR()
{
  digitalWrite(11, HIGH);
  digitalWrite(12, LOW);
  delay(10);
  int reading_off = analogRead(IR_PIN);
  digitalWrite(11, LOW);
  digitalWrite(12, LOW);
  delay(10);
  int reading_on = analogRead(IR_PIN);
  int reading = reading_off - reading_on;
  return reading;
}

void takeActionBasedOnColor(const int colourRes) {
  // red : left
  // green : right
  // orange : 180deg within grid
  // pink : 2 left
  // light blue : 2 right
  // white : Stop, play celebratory music
  
  switch (colourRes) {
    case 0: stopMotor(); celebrate(); break;
    case 1: turnLeft(); break;
    case 2: turnRight(); break;
    case 3: uTurn(); break;
    case 4: doubleLeftTurn(); break;
    case 5: doubleRightTurn(); break;
  }
  
}
